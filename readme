npm init -y
npm i express
npm install mongoose 
npm i nodemon
npm install bcryptjs

npm i express-validator

npm i jsonwebtoken

npm install cors   

npm i multer

npm install nodemailer

Middleware для авторизации — это промежуточное программное обеспечение, 
которое разрешает пользователю доступ к защищенным ресурсам.  1

Оно проверяет подлинность пользователя, прежде чем предоставить 
ему доступ к защищенным ресурсам. 1


req, res и next — это параметры функции middleware:

req — объект запроса. С его помощью можно получить доступ к таким данным, как заголовки запроса, полный URL, IP-адрес вызывающего и другие.  42
res — объект ответа.  4
next — следующая функция middleware.  24
Функции middleware могут выполнять различные задачи, например,
 изменять объекты запроса или ответа, заканчивать цикл запроса и ответа или 
 вызывать следующую функцию middleware в стеке.  4

Middleware часто используются для авторизации, позволяя контролировать
 доступ к определённым ресурсам и операциям в API.


 Метод OPTIONS в HTTP используется для получения параметров HTTP-соединения и 
 другой служебной информации. Он даёт возможность запросить параметры для 
 конкретного ресурса, 
 указанного в URI, не производя никаких действий с самим ресурсом. 


Multer — это промежуточное ПО Node.js для обработки multipart/form-data, 
которое в основном используется для загрузки файлов. 
Оно написано на основе busboy для максимальной эффективности.


Бэкенд представляет собой систему для аренды автомобилей. Все пользователи проходят регистрацию через email. После подтверждения email они могут заполнять профиль, загружать паспорт, добавлять автомобили или арендовать чужие. Аутентификация осуществляется через JWT. Все защищённые маршруты требуют передачи токена в заголовке Authorization.

Регистрация происходит по адресу /auth/registration. Отправляется JSON-запрос, содержащий один ключ: email. В ответ отправляется код подтверждения на указанный email.

Подтверждение email выполняется через маршрут /auth/verify-email. Отправляется JSON-запрос с ключами email, code. Если код верный, возвращается токен.

После подтверждения пользователь может войти через /auth/login. Допускается вход либо по email и code, либо по username и password. Если используется email и code, то пароль не требуется. Если используется username и password, то вход осуществляется через проверку пароля. В ответ возвращается токен.

Получение профиля доступно по маршруту /auth/profile. Требуется токен. Профиль возвращается в виде JSON.

Обновление профиля выполняется по маршруту /auth/profile/update. Запрос отправляется как form-data. Допустимые ключи: name, surname, patronymic, phone, citizenship, birthDate, drivingExperience, username, password, passport. Ключ passport указывается один или два раза, каждый раз с файлом. Поле birthDate передаётся в формате год-месяц-день. Все текстовые поля передаются как строки. Если загружается новый паспорт, статус документов сбрасывается на false и требуется повторная проверка.

Удаление собственного аккаунта происходит по адресу /auth/users/me методом DELETE. Требуется токен.

Если пользователь является администратором, он может получить список всех пользователей через /auth/users. Также он может удалить любого пользователя, кроме самого себя, по адресу /auth/users/:id методом DELETE.

Проверка документов осуществляется через /document/documents. Только для администратора. Возвращаются пользователи, у которых загружен паспорт и флаг documentsVerified равен false.

Подтверждение или отклонение документов осуществляется через PATCH-запрос на /document/documents/:id. В теле JSON-запроса указывается ключ action. Допустимые значения: approve, reject. При approve документы подтверждаются. При reject файлы паспорта очищаются и документы считаются отклонёнными.

Добавление автомобиля осуществляется через /product/addProduct методом POST. Формат запроса — form-data. Ключи: name, description, price, carModel, carYear, carColor, carTransmission, carFuelType, carSeats, carLuggage, canDeliver, address, image[]. Ключ image[] может повторяться для загрузки нескольких изображений. Все значения передаются как строки. Поле canDeliver должно быть строкой true или false.

Получение списка машин доступно через /product/products. Маршрут доступен авторизованным пользователям. Поддерживается фильтрация через query-параметры, если необходимо.

Создание аренды выполняется по маршруту /rental/create. Отправляется JSON-запрос с ключами carId, startDate, endDate, phoneNumber. Все значения передаются как строки. Даты должны быть в формате год-месяц-день. Если машина занята на выбранные даты, будет возвращена ошибка.

Оплата аренды осуществляется через маршрут /rental/pay. В теле JSON-запроса указывается rentalId.

Получение своих аренд осуществляется через /rental/my. В ответе возвращаются все аренды, созданные текущим пользователем.

Получение входящих заявок доступно по адресу /rental/incoming. В ответ возвращаются все аренды, в которых текущий пользователь является владельцем машины.

Обновление статуса аренды выполняется через /rental/update-status. В теле JSON-запроса указываются ключи rentalId, status. Значение status может быть paid, cancelled, completed. Только владелец машины может обновить статус аренды.

Во всех защищённых маршрутах необходимо указывать заголовок Authorization с токеном. Формат заголовка: Bearer пробел токен.

Все даты передаются в формате год-месяц-день. Все файлы загружаются через form-data. Названия ключей для файлов: passport — для документов пользователя, image[] — для изображений автомобилей.

Роли пользователя сохраняются в поле roles. По умолчанию устанавливается роль USER. Чтобы сделать пользователя администратором, в базе MongoDB нужно вручную указать значение roles равное ADMIN в массиве.

Бэкенд полностью протестирован через Postman. Все маршруты работают. Вход, регистрация, загрузка паспорта, добавление автомобиля, аренда, оплата и управление заявками — всё функционирует как ожидается. Бэкенд готов к интеграции с фронтендом.

Фронтенд может подключаться к этим маршрутам напрямую. Все ключи указаны точно. Запросы должны формироваться строго с указанными названиями ключей. Если требуется дополнительная точка API — её можно добавить по необходимости. Текущий набор полностью покрывает работу платформы аренды авто.
