const User = require("../models/User");
const Role = require("../models/UserRole");
const bcrypt = require("bcryptjs");
const { validationResult } = require("express-validator");
const jwt = require("jsonwebtoken");
const { secret } = require("../config");
const mailer = require("../nodemailer");

const generateAccessToken = (id, roles) => {
  const payload = { id, roles };
  return jwt.sign(payload, secret, { expiresIn: "24h" });
};

class authController {

  async getAllUsers(req, res) {
    try {
      const users = await User.find().select("-password");
      return res.json(users);
    } catch (e) {
      console.log(e);
      return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" });
    }
  }

  async deleteUser(req, res) {
    try {
      const { id } = req.params;

      if (req.user.id === id) {
        return res.status(400).json({ message: "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è" });
      }

      await User.findByIdAndDelete(id);
      return res.status(200).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω" });
    } catch (e) {
      console.log(e);
      return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
    }
  }

  async reqistration(req, res) {
  try {
    const { email } = req.body;

    let userRole = await Role.findOne({ value: "USER" });

    if (!userRole) {
      userRole = new Role({ value: "USER" });
      await userRole.save();
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∫–æ–¥ (4 —Ü–∏—Ñ—Ä—ã)
    const verificationCode = Math.floor(1000 + Math.random() * 9000).toString();

    let user = await User.findOne({ email });

    if (!user) {
      const userRole = await Role.findOne({ value: "USER" });
      user = new User({
        email,
        password: 'temporary', 
        roles: [userRole.value],
        verificationCode,
        isVerified: false
      });
      await user.save();
    } else {
      user.verificationCode = verificationCode;
      await user.save();
    }

    const message = {
      to: email,
      subject: "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
      text: `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${verificationCode}`,
    };
    mailer(message);

    return res.status(200).json({
      message: "–ù–∞ –≤–∞—à email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
      email
    });

  } catch (e) {
    console.log(e); // üëà –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
    return res.status(400).json({ message: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" });
  }
}

async updateProfile(req, res) {
  try {
    const {
      name,
      surname,
      patronymic,
      phone,
      citizenship,
      birthDate,
      drivingExperience,
      username, // ‚úÖ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º
      password
    } = req.body;

    const passportFiles = req.files?.passport ? req.files.passport.map(f => f.path) : [];
    const driverLicenseFiles = req.files?.driverLicense ? req.files.driverLicense.map(f => f.path) : [];

    if (passportFiles.length > 2 || driverLicenseFiles.length > 2) {
      return res.status(400).json({ message: "–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 2 —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞" });
    }

    const updatedData = {};

    if (name) updatedData.name = name;
    if (surname) updatedData.surname = surname;
    if (patronymic) updatedData.patronymic = patronymic;
    if (phone) updatedData.phone = phone;
    if (citizenship) updatedData.citizenship = citizenship;
    if (birthDate) updatedData.birthDate = new Date(birthDate);
    if (drivingExperience) updatedData.drivingExperience = parseInt(drivingExperience, 10);

    // ‚úÖ –í–æ—Ç —ç—Ç–∏ –¥–≤–∞ –ø–æ–ª—è:
    if (username) updatedData.username = username;
    if (password) updatedData.password = bcrypt.hashSync(password, 8);

    if (passportFiles.length > 0) {
      updatedData.passportFiles = passportFiles;
      updatedData.documentsVerified = false;
    }

    if (driverLicenseFiles.length > 0) {
      updatedData.driverLicenseFiles = driverLicenseFiles;
      updatedData.documentsVerified = false;
    }

    const user = await User.findById(req.user.id);
    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const updatedUser = await User.findByIdAndUpdate(req.user.id, updatedData, { new: true });

    return res.status(200).json({ message: "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω", user: updatedUser });

  } catch (e) {
    console.log(e);
    return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è" });
  }
}

  async verifyEmail(req, res) {
    try {
      const { email, code } = req.body;

      const user = await User.findOne({ email });
      if (!user) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (user.isVerified) {
        const token = generateAccessToken(user._id, user.roles);
        return res.status(200).json({ message: "Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω", token });
      }

      if (user.verificationCode !== code) {
        return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥" });
      }

      if (!user.password || user.password === 'temporary') {
        const generatedPassword = Math.random().toString(36).slice(-8);
        const hash = bcrypt.hashSync(generatedPassword, 8);
        user.password = hash;
      }

      const token = generateAccessToken(user._id, user.roles);
      user.isVerified = true;
      user.verificationCode = null;
      await user.save();

      return res.status(200).json({
        message: "Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
        token
      });

    } catch (e) {
      console.log(e);
      return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" });
    }
  }

  async setRole(req, res) {
    try {
      const { id, role } = req.body;

      if (req.user.roles[0] !== "ADMIN") {
        return res.status(403).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
      }

      const user = await User.findById(id);
      if (!user) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const roleDoc = await Role.findOne({ value: role });
      if (!roleDoc) {
        return res.status(400).json({ message: "–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }

      user.roles = [role];
      await user.save();

      return res.status(200).json({ message: `–†–æ–ª—å ${role} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞` });

    } catch (e) {
      console.log(e);
      return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏" });
    }
  }

  async login(req, res) {
    try {
      const { username, email, password } = req.body;

      let user;
      if (username) {
        user = await User.findOne({ username });
      } else if (email) {
        user = await User.findOne({ email });
      } else {
        return res.status(400).json({ message: "–ù–µ —É–∫–∞–∑–∞–Ω –ª–æ–≥–∏–Ω –∏–ª–∏ email" });
      }

      if (!user) {
        return res.status(400).json({ message: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—Ö–æ–¥!" });
      }

      const validPassword = bcrypt.compareSync(password, user.password);
      if (!validPassword) {
        return res.status(400).json({ message: "–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
      }

      const token = generateAccessToken(user._id, user.roles);
      return res.status(200).json({ token });
    } catch (e) {
      console.log(e);
      return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" });
    }
  }

  async getUsers(req, res) {
    try {
      const users = await User.find();
      res.json(users);
    } catch (e) {
      console.log(e);
      return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" });
    }
  }

  async getProfile(req, res) {
    try {
      const user = await User.findById(req.user.id);
      res.status(200).json({ user });
    } catch (e) {
      console.log(e);
      res.status(400).json({ message: "–û—à–∏–±–∫–∞" });
    }
  }

  async loginByEmail(req, res) {
    try {
      const { email } = req.body;

      const user = await User.findOne({ email });
      if (!user) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const verificationCode = Math.floor(1000 + Math.random() * 9000).toString();
      user.verificationCode = verificationCode;
      await user.save();

      const message = {
        to: email,
        subject: "–ö–æ–¥ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É",
        text: `–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞: ${verificationCode}`,
      };
      mailer(message);

      return res.json({ message: "–ù–∞ –≤–∞—à email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞", email });

    } catch (e) {
      console.log(e);
      return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ email" });
    }
  }

  async verifyLoginCode(req, res) {
    try {
      const { email, code } = req.body;

      const user = await User.findOne({ email });
      if (!user) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (user.verificationCode !== code) {
        return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥" });
      }

      const token = generateAccessToken(user._id, user.roles);
      user.verificationCode = null;
      await user.save();

      return res.status(200).json({
        message: "–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏",
        token
      });

    } catch (e) {
      console.log(e);
      return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞" });
    }
  }
}

module.exports = new authController();